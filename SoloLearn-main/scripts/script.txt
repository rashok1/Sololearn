DROP DATABASE IF EXISTS SoloLearn;
CREATE DATABASE IF NOT EXISTS SoloLearn;

USE SoloLearn;

CREATE TABLE IF NOT EXISTS users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    password VARCHAR(255) NOT NULL,
    points INT DEFAULT 0,          -- This will be used as XP (experience points)
    level INT DEFAULT 1,           -- Level of the user (based on points)
    role ENUM('User', 'Mentor', 'Leader') DEFAULT 'User',
    streak INT DEFAULT 0           -- Streak to track consecutive days active
);

CREATE TABLE community_posts (
    post_id SERIAL PRIMARY KEY,
    id INT REFERENCES users(id) ON DELETE CASCADE,
    content TEXT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE levels (
    level_id INT AUTO_INCREMENT PRIMARY KEY,
    level_name VARCHAR(100) NOT NULL,
    description TEXT,
    min_points INT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE points_log (
    log_id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT,
    points_earned INT,
    reason VARCHAR(255),
    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

-- Insert initial levels
INSERT INTO levels (level_name, description, min_points) VALUES 
('Beginner', 'New learner', 0),
('Intermediate', 'Getting the hang of it', 100),
('Advanced', 'Mastering the concepts', 500),
('Expert', 'Highly skilled in coding', 1000);

-- Trigger to automatically update user level based on points
DROP TRIGGER IF EXISTS update_user_level;

DELIMITER //
CREATE TRIGGER update_user_level 
BEFORE UPDATE ON users
FOR EACH ROW
BEGIN
    DECLARE new_level INT;

    -- Get the level based on the new points
    SELECT level_id INTO new_level
    FROM levels
    WHERE NEW.points >= min_points 
    ORDER BY min_points DESC
    LIMIT 1;

    -- Set the new level directly without updating the users table
    SET NEW.level = new_level;
END;
//
DELIMITER ;


CREATE TABLE languages (
  id INT AUTO_INCREMENT PRIMARY KEY,
  name VARCHAR(50) NOT NULL UNIQUE -- Example: 'C#', 'PHP', etc.
);

-- Create `questions` table to store quiz questions
CREATE TABLE questions (
  id INT AUTO_INCREMENT PRIMARY KEY,
  question TEXT NOT NULL,
  option_1 VARCHAR(255) NOT NULL,
  option_2 VARCHAR(255) NOT NULL,
  option_3 VARCHAR(255) NOT NULL,
  option_4 VARCHAR(255) NOT NULL,
  answer VARCHAR(255) NOT NULL,
  difficulty ENUM('easy', 'medium', 'hard') NOT NULL,
  language_id INT, -- Reference to the language table (optional)
  FOREIGN KEY (language_id) REFERENCES languages(id) -- Link to the language table
);

INSERT INTO languages (name) 
VALUES 
    ('Java'), 
    ('Python'), 
    ('C#'), 
    ('SQL');

-- Inserting Java questions for easy difficulty
INSERT INTO questions (question, option_1, option_2, option_3, option_4, answer, difficulty, language_id)
VALUES 
    ('What is the default value of a boolean variable in Java?', 'true', 'false', 'null', '0', 'false', 'easy', (SELECT id FROM languages WHERE name = 'Java')),
    ('Which of the following is used to declare a constant in Java?', 'final', 'constant', 'const', 'static', 'final', 'easy', (SELECT id FROM languages WHERE name = 'Java')),
    ('Which of these is the correct syntax for a single-line comment in Java?', '// comment', '# comment', '/ comment', '/* comment */', '// comment', 'easy', (SELECT id FROM languages WHERE name = 'Java'));

-- Inserting Java questions for medium difficulty
INSERT INTO questions (question, option_1, option_2, option_3, option_4, answer, difficulty, language_id)
VALUES 
    ('What is the return type of the `main` method in Java?', 'void', 'int', 'String', 'boolean', 'void', 'medium', (SELECT id FROM languages WHERE name = 'Java')),
    ('Which of these classes can be used for reading from a file in Java?', 'FileInputStream', 'FileReader', 'BufferedReader', 'All of the above', 'All of the above', 'medium', (SELECT id FROM languages WHERE name = 'Java')),
    ('What will the following code print? System.out.println(10 / 3);', '3', '3.333', 'Error', 'None of the above', '3', 'medium', (SELECT id FROM languages WHERE name = 'Java'));

-- Inserting Java questions for hard difficulty
INSERT INTO questions (question, option_1, option_2, option_3, option_4, answer, difficulty, language_id)
VALUES 
    ('Which method is used to create a thread in Java?', 'start()', 'execute()', 'run()', 'init()', 'start()', 'hard', (SELECT id FROM languages WHERE name = 'Java')),
    ('What is the purpose of the `volatile` keyword in Java?', 'To declare a constant variable', 'To prevent multiple threads from modifying the same variable', 'To optimize the performance of threads', 'None of the above', 'To prevent multiple threads from modifying the same variable', 'hard', (SELECT id FROM languages WHERE name = 'Java')),
    ('Which collection class in Java is synchronized?', 'ArrayList', 'HashSet', 'LinkedList', 'Vector', 'Vector', 'hard', (SELECT id FROM languages WHERE name = 'Java'));

-- Inserting Python questions for easy difficulty
INSERT INTO questions (question, option_1, option_2, option_3, option_4, answer, difficulty, language_id)
VALUES 
    ('What is the correct way to define a function in Python?', 'def my_function()', 'function my_function()', 'create my_function()', 'my_function()', 'def my_function()', 'easy', (SELECT id FROM languages WHERE name = 'Python')),
    ('Which of the following is a mutable data type in Python?', 'String', 'List', 'Tuple', 'Integer', 'List', 'easy', (SELECT id FROM languages WHERE name = 'Python')),
    ('What does the `len()` function do in Python?', 'Calculates the length of a list or string', 'Calculates the square of a number', 'Finds the maximum value in a list', 'None of the above', 'Calculates the length of a list or string', 'easy', (SELECT id FROM languages WHERE name = 'Python'));

-- Inserting Python questions for medium difficulty
INSERT INTO questions (question, option_1, option_2, option_3, option_4, answer, difficulty, language_id)
VALUES 
    ('Which of these is the correct way to create a list in Python?', '[1, 2, 3]', '(1, 2, 3)', 'list(1, 2, 3)', 'list[1, 2, 3]', '[1, 2, 3]', 'medium', (SELECT id FROM languages WHERE name = 'Python')),
    ('What will the following code output? print(type("Hello"))', '<class "str">', '<type "str">', 'str', 'None of the above', '<class "str">', 'medium', (SELECT id FROM languages WHERE name = 'Python')),
    ('What is the difference between `is` and `==` in Python?', 'No difference', '`is` checks for object identity, `==` checks for value equality', '`is` checks for value equality, `==` checks for object identity', 'None of the above', '`is` checks for object identity, `==` checks for value equality', 'medium', (SELECT id FROM languages WHERE name = 'Python'));

-- Inserting Python questions for hard difficulty
INSERT INTO questions (question, option_1, option_2, option_3, option_4, answer, difficulty, language_id)
VALUES 
    ('Which Python module can be used to work with regular expressions?', 're', 'regex', 'rege', 'regexlib', 're', 'hard', (SELECT id FROM languages WHERE name = 'Python')),
    ('What is the purpose of the `__init__` method in Python?', 'To initialize the object properties', 'To define the class', 'To execute code outside of the class', 'To initialize the class', 'To initialize the object properties', 'hard', (SELECT id FROM languages WHERE name = 'Python')),
    ('What does the `yield` keyword do in Python?', 'Returns the value from a function', 'Generates a sequence of values in a generator function', 'Ends the function execution', 'None of the above', 'Generates a sequence of values in a generator function', 'hard', (SELECT id FROM languages WHERE name = 'Python'));


-- Inserting C# questions for easy difficulty
INSERT INTO questions (question, option_1, option_2, option_3, option_4, answer, difficulty, language_id)
VALUES 
    ('What keyword is used to declare a variable in C#?', 'let', 'var', 'dim', 'int', 'var', 'easy', (SELECT id FROM languages WHERE name = 'C#')),
    ('Which symbol is used for single-line comments in C#?', '#', '//', '/*', '--', '//', 'easy', (SELECT id FROM languages WHERE name = 'C#')),
    ('Which of the following is a value type in C#?', 'string', 'int', 'List', 'Object', 'int', 'easy', (SELECT id FROM languages WHERE name = 'C#'));

-- Inserting C# questions for medium difficulty
INSERT INTO questions (question, option_1, option_2, option_3, option_4, answer, difficulty, language_id)
VALUES 
    ('What is the default value of an uninitialized reference type variable in C#?', 'null', '0', 'false', 'undefined', 'null', 'medium', (SELECT id FROM languages WHERE name = 'C#')),
    ('What type of loop is best for iterating through a collection in C#?', 'for', 'while', 'foreach', 'do-while', 'foreach', 'medium', (SELECT id FROM languages WHERE name = 'C#')),
    ('What does `async` mean in C#?', 'The method runs synchronously', 'The method runs asynchronously', 'The method runs in parallel', 'The method runs in a thread pool', 'The method runs asynchronously', 'medium', (SELECT id FROM languages WHERE name = 'C#'));

-- Inserting C# questions for hard difficulty
INSERT INTO questions (question, option_1, option_2, option_3, option_4, answer, difficulty, language_id)
VALUES 
    ('What is the purpose of the `lock` keyword in C#?', 'To encrypt data', 'To make a method thread-safe', 'To block a thread', 'To monitor thread execution', 'To make a method thread-safe', 'hard', (SELECT id FROM languages WHERE name = 'C#')),
    ('What is the difference between `Task` and `Thread` in C#?', '`Task` is more flexible and lighter', '`Thread` is a newer concept', '`Task` is used for async programming', 'None of the above', '`Task` is more flexible and lighter', 'hard', (SELECT id FROM languages WHERE name = 'C#')),
    ('What is the result of the following code in C#: int x = 2; Console.WriteLine(x++);', '2', '3', 'Error', 'None of the above', '2', 'hard', (SELECT id FROM languages WHERE name = 'C#'));

-- Inserting SQL questions for easy difficulty
INSERT INTO questions (question, option_1, option_2, option_3, option_4, answer, difficulty, language_id)
VALUES 
    ('What SQL keyword is used to retrieve data from a database?', 'SELECT', 'GET', 'FETCH', 'RETRIEVE', 'SELECT', 'easy', (SELECT id FROM languages WHERE name = 'SQL')),
    ('Which SQL statement is used to insert new data into a table?', 'INSERT INTO', 'INSERT', 'ADD', 'CREATE', 'INSERT INTO', 'easy', (SELECT id FROM languages WHERE name = 'SQL')),
    ('Which SQL clause is used to filter the results?', 'WHERE', 'FILTER', 'CONDITIONS', 'IF', 'WHERE', 'easy', (SELECT id FROM languages WHERE name = 'SQL'));

-- Inserting SQL questions for medium difficulty
INSERT INTO questions (question, option_1, option_2, option_3, option_4, answer, difficulty, language_id)
VALUES 
    ('What does the SQL `JOIN` keyword do?', 'Combines data from multiple tables', 'Filters data from one table', 'Calculates sum of data', 'None of the above', 'Combines data from multiple tables', 'medium', (SELECT id FROM languages WHERE name = 'SQL')),
    ('Which SQL function is used to find the highest value in a column?', 'MAX()', 'MIN()', 'COUNT()', 'SUM()', 'MAX()', 'medium', (SELECT id FROM languages WHERE name = 'SQL')),
    ('What does the SQL `GROUP BY` clause do?', 'Groups rows that have the same values into summary rows', 'Orders the rows in ascending order', 'Sorts the rows by date', 'None of the above', 'Groups rows that have the same values into summary rows', 'medium', (SELECT id FROM languages WHERE name = 'SQL'));

-- Inserting SQL questions for hard difficulty
INSERT INTO questions (question, option_1, option_2, option_3, option_4, answer, difficulty, language_id)
VALUES 
    ('What is the purpose of the `HAVING` clause in SQL?', 'Filters records before grouping', 'Filters records after grouping', 'Joins multiple tables', 'Sorts the records', 'Filters records after grouping', 'hard', (SELECT id FROM languages WHERE name = 'SQL')),
    ('Which command is used to remove all rows from a table without deleting the table itself?', 'DELETE', 'DROP', 'TRUNCATE', 'REMOVE', 'TRUNCATE', 'hard', (SELECT id FROM languages WHERE name = 'SQL')),
    ('What type of join returns all records when there is a match in either left or right table?', 'INNER JOIN', 'LEFT JOIN', 'RIGHT JOIN', 'FULL OUTER JOIN', 'FULL OUTER JOIN', 'hard', (SELECT id FROM languages WHERE name = 'SQL'));

CREATE TABLE badges (
  id INT AUTO_INCREMENT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  description TEXT,
  image_url VARCHAR(255),
  min_points INT NOT NULL
);

CREATE TABLE user_badges (
  user_id INT,
  badge_id INT,
  earned_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (user_id, badge_id),
  FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
  FOREIGN KEY (badge_id) REFERENCES badges(id) ON DELETE CASCADE
);

INSERT INTO badges (name, description, image_url, min_points) VALUES
('First Steps', 'Earn 50 XP', '/badges/badge1.png', 50),
('Rising Star', 'Earn 100 XP', '/badges/badge2.png', 100),
('Code Champ', 'Earn 500 XP', '/badges/badge3.png', 500),
('Legendary Coder', 'Earn 1000 XP', '/badges/badge4.png', 1000),
('Unstoppable', 'Earn 2000 XP', '/badges/badge5.png', 2000);

CREATE TABLE `flashcards` (
  `id` int(11) NOT NULL,
  `question` text NOT NULL,
  `answer` text NOT NULL,
  `Language` varchar(20) NOT NULL,
  `hint` varchar(255) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

INSERT INTO `flashcards` (`id`, `question`, `answer`, `Language`, `hint`) VALUES
(1, 'What is the keyword to define a function in Python?\r\n', 'def\r\n', 'python', 'It\'s only 3 letters. Starts with \"d\".'),
(2, 'What is the difference between is and == in Python?', '== checks if two values are equal, while is checks if they are the same object in memory.', 'python', 'One checks equality, one checks identity.'),
(3, 'What is the difference between == and .equals() in Java?', '== checks if two object references point to the same memory location, while .equals() checks if the values inside the objects are the same.\r\n\r\n', 'java', 'One is for comparing values, one is a method'),
(4, 'What is a nullable type in C#?', 'A nullable type can represent all the values of its underlying type plus null. You define it with a ?, like int?.\r\n\r\n', 'c#', 'It lets variables hold \"null\" or a value.\r\n'),
(5, 'Python: What is the output of this code?\n\nx = [i*i for i in range(3)]\nprint(x)', '[0, 1, 4]', 'python', ''),
(6, 'Java: Which keyword prevents method overriding?\nA) static\nB) final\nC) abstract\nD) private', 'B) final', 'java', ''),
(7, 'C#: What is the result of the following?\n\nstring s = null;\nConsole.WriteLine(s ?? \"default\");', 'default', 'c#', ''),
(8, 'Python: What error will this code raise?\n\nx = (1, 2, 3)\nx[0] = 99', 'TypeError: \'tuple\' object does not support item assignment', 'python', ''),
(9, 'Java: Which of these allows dynamic method dispatch?\nA) Interface\nB) Abstract Class\nC) Inheritance\nD) All of the above', 'D) All of the above', 'java', ''),
(10, 'C#: Which LINQ method returns the first element that matches a condition?\nA) FirstOrDefault()\nB) Where()\nC) Select()\nD) Take()', 'A) FirstOrDefault()', 'c#', ''),
(11, 'Python: What\'s the output?\n\nprint(\'Python\'[::-1])', 'nohtyP', 'python', ''),
(12, 'Java: What will this print?\n\nint[] arr = {1,2,3};\nSystem.out.println(arr.length);', '3', 'java', ''),
(13, 'C#: In a try-catch-finally block, which block always executes?\nA) try\nB) catch\nC) finally\nD) none', 'C) finally', 'c#', ''),
(14, 'Python: What symbol is used for list comprehension?', '[] (square brackets)', 'python', ''),
(15, 'Java: Which of these is not a primitive data type?\nA) int\nB) float\nC) String\nD) boolean', 'C) String', 'java', ''),
(16, 'C#: What does \'??\' operator do?', 'Returns left operand if not null, else right operand', 'c#', ''),
(17, 'Python Debugging: What tool lets you step through code line-by-line?', 'pdb (Python Debugger)', 'python', ''),
(18, 'Java: What will this print?\n\nSystem.out.println(10 % 3);', '1', 'java', ''),
(19, 'C#: What\'s the result of this?\n\nint? x = null;\nConsole.WriteLine(x ?? 5);', '5', 'c#', ''),
(20, 'Python: What is the output?\n\nprint(\'Hello\' * 2)', 'HelloHello', 'python', ''),
(21, 'Java: Which keyword is used to inherit a class?', 'extends', 'java', ''),
(22, 'C#: Which method converts string to int?\nA) int.Parse()\nB) Convert.ToInt32()\nC) Both A and B\nD) None', 'C) Both A and B', 'c#', ''),
(23, 'Python: What\'s the output?\n\nx = {\'a\':1, \'b\':2}\nprint(x.get(\'c\', 99))', '99', 'python', ''),
(24, 'Python: What is the output?\n\nx = 0\nfor i in range(1, 5):\n    x += i*i\nprint(x)', '30', 'python', ''),
(25, 'Java: What is the output?\n\nint x = 1;\nfor(int i=1; i<=3; i++){\n    x *= i;\n}\nSystem.out.println(x);', '6', 'java', ''),
(26, 'C#: What will this print?\n\nint a = 1, b = 1;\nfor(int i=0; i<4; i++){\n    int temp = b;\n    b = a + b;\n    a = temp;\n}\nConsole.WriteLine(a);', '3', 'c#', ''),
(27, 'Python: What is the output?\n\ndef recur(n):\n    if n == 0:\n        return 1\n    return n * recur(n-1)\nprint(recur(3))', '6', 'python', ''),
(28, 'Java: What is the output?\n\nint sum = 0;\nfor(int i=1; i<=10; i+=2){\n    sum += i;\n}\nSystem.out.println(sum);', '25', 'java', ''),
(29, 'C#: What is the output?\n\nstring s = \"abc\";\nstring result = \"\";\nforeach(var c in s.Reverse()){\n    result += c;\n}\nConsole.WriteLine(result);', 'cba', 'c#', '');



------------------------
for testing 

UPDATE users
SET points = points + 2000
WHERE id = 2;

SELECT * FROM users;